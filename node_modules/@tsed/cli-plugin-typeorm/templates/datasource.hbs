import {registerProvider} from "@tsed/di";
import {DataSource} from "typeorm";
import {Logger} from "@tsed/logger";

export const {{tokenName}} = Symbol.for("{{symbolName}}");
export const {{symbolName}} = new DataSource({
  type: "{{database}}",
  entities: [],
{{#switch database}}
  {{#case 'mysql'}}
  host: "localhost",
  port: 3306,
  username: "test",
  password: "test",
  database: "test"
  {{/case}}
  {{#case 'mariadb'}}
  host: "localhost",
  port: 3306,
  username: "test",
  password: "test",
  database: "test"
  {{/case}}
  {{#case 'sqlite'}}
  database: "database.sqlite"
  {{/case}}
  {{#case 'better-sqlite3'}}
  database: "database.sqlite"
  {{/case}}
  {{#case 'postgres'}}
  host: "localhost",
  port: 5432,
  username: "test",
  password: "test",
  database: "test"
  {{/case}}
  {{#case 'cockroachdb'}}
  host: "localhost",
  port: 26257,
  username: "root",
  password: "",
  database: "defaultdb"
  {{/case}}
  {{#case 'mssql'}}
  host: "localhost",
  username: "sa",
  password: "Admin12345",
  database: "tempdb"
  {{/case}}
  {{#case 'oracle'}}
  host: "localhost",
  username: "system",
  password: "oracle",
  port: 1521,
  sid: "xe.oracle.docker"
  {{/case}}
  {{#case 'mongodb'}}
  database: "test"
  {{/case}}
{{/switch}}
});

registerProvider<DataSource>({
  provide: {{tokenName}},
  type: "typeorm:datasource",
  deps: [Logger],
  async useAsyncFactory(logger: Logger) {
    await {{symbolName}}.initialize();

    logger.info("Connected with typeorm to database: {{name}}");

    return {{symbolName}};
  },
  hooks: {
    $onDestroy(dataSource) {
      return dataSource.isInitialized && dataSource.close();
    }
  }
});
