"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeORMInitHook = void 0;
const tslib_1 = require("tslib");
const cli_core_1 = require("@tsed/cli-core");
const di_1 = require("@tsed/di");
const change_case_1 = require("change-case");
function getDatabase(ctx) {
    return ctx.features.find((type) => type.includes("typeorm:"))?.split(":")[1] || "";
}
let TypeORMInitHook = class TypeORMInitHook {
    cliService;
    packageJson;
    rootRenderer;
    srcRenderer;
    cliDockerComposeYaml;
    onExec(ctx) {
        this.addScripts();
        this.addDependencies(ctx);
        this.addDevDependencies(ctx);
        const database = getDatabase(ctx);
        if (!database) {
            return [];
        }
        return this.cliService.getTasks("generate", {
            ...ctx,
            type: "typeorm:dataSource",
            name: (0, change_case_1.pascalCase)(database),
            typeormDataSource: ctx.features.find((value) => value.startsWith("typeorm:"))
        });
    }
    addScripts() {
        this.packageJson.addScripts({
            typeorm: "typeorm-ts-node-commonjs"
        });
    }
    addDependencies(ctx) {
        this.packageJson.addDependencies({}, ctx);
    }
    addDevDependencies(ctx) {
        this.packageJson.addDevDependencies({}, ctx);
    }
};
tslib_1.__decorate([
    (0, cli_core_1.Inject)(),
    tslib_1.__metadata("design:type", cli_core_1.CliService)
], TypeORMInitHook.prototype, "cliService", void 0);
tslib_1.__decorate([
    (0, cli_core_1.Inject)(),
    tslib_1.__metadata("design:type", cli_core_1.ProjectPackageJson)
], TypeORMInitHook.prototype, "packageJson", void 0);
tslib_1.__decorate([
    (0, cli_core_1.Inject)(),
    tslib_1.__metadata("design:type", cli_core_1.RootRendererService)
], TypeORMInitHook.prototype, "rootRenderer", void 0);
tslib_1.__decorate([
    (0, cli_core_1.Inject)(),
    tslib_1.__metadata("design:type", cli_core_1.SrcRendererService)
], TypeORMInitHook.prototype, "srcRenderer", void 0);
tslib_1.__decorate([
    (0, cli_core_1.Inject)(),
    tslib_1.__metadata("design:type", cli_core_1.CliDockerComposeYaml)
], TypeORMInitHook.prototype, "cliDockerComposeYaml", void 0);
tslib_1.__decorate([
    (0, cli_core_1.OnExec)("init"),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object]),
    tslib_1.__metadata("design:returntype", void 0)
], TypeORMInitHook.prototype, "onExec", null);
TypeORMInitHook = tslib_1.__decorate([
    (0, di_1.Injectable)()
], TypeORMInitHook);
exports.TypeORMInitHook = TypeORMInitHook;
//# sourceMappingURL=TypeORMInitHook.js.map