{"version":3,"file":"TypeORMInitHook.js","sourceRoot":"","sources":["../../../src/hooks/TypeORMInitHook.ts"],"names":[],"mappings":";AACA,OAAO,EACL,oBAAoB,EACpB,UAAU,EACV,MAAM,EACN,MAAM,EACN,kBAAkB,EAClB,mBAAmB,EACnB,kBAAkB,EACnB,MAAM,gBAAgB,CAAC;AACxB,OAAO,EAAC,UAAU,EAAC,MAAM,UAAU,CAAC;AACpC,OAAO,EAAC,UAAU,EAAC,MAAM,aAAa,CAAC;AAEvC,SAAS,WAAW,CAAC,GAAmB;IACtC,OAAO,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACrF,CAAC;AAGM,IAAM,eAAe,GAArB,MAAM,eAAe;IAEhB,UAAU,CAAa;IAGvB,WAAW,CAAqB;IAGhC,YAAY,CAAsB;IAGlC,WAAW,CAAqB;IAGhC,oBAAoB,CAAuB;IAGrD,MAAM,CAAC,GAAmB;QACxB,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QAE7B,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;QAElC,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,EAAE,CAAC;SACX;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,UAAU,EAAE;YAC1C,GAAG,GAAG;YACN,IAAI,EAAE,oBAAoB;YAC1B,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC;YAC1B,iBAAiB,EAAE,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;SAC9E,CAAC,CAAC;IACL,CAAC;IAED,UAAU;QACR,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC;YAC1B,OAAO,EAAE,0BAA0B;SACpC,CAAC,CAAC;IACL,CAAC;IAED,eAAe,CAAC,GAAmB;QACjC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED,kBAAkB,CAAC,GAAmB;QACpC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;IAC/C,CAAC;CACF,CAAA;AAhDC;IAAC,MAAM,EAAE;8BACa,UAAU;mDAAC;AAEjC;IAAC,MAAM,EAAE;8BACc,kBAAkB;oDAAC;AAE1C;IAAC,MAAM,EAAE;8BACe,mBAAmB;qDAAC;AAE5C;IAAC,MAAM,EAAE;8BACc,kBAAkB;oDAAC;AAE1C;IAAC,MAAM,EAAE;8BACuB,oBAAoB;6DAAC;AAErD;IAAC,MAAM,CAAC,MAAM,CAAC;;;;6CAkBd;AAlCU,eAAe;IAD3B,UAAU,EAAE;GACA,eAAe,CAiD3B;SAjDY,eAAe","sourcesContent":["import {InitCmdContext} from \"@tsed/cli\";\nimport {\n  CliDockerComposeYaml,\n  CliService,\n  Inject,\n  OnExec,\n  ProjectPackageJson,\n  RootRendererService,\n  SrcRendererService\n} from \"@tsed/cli-core\";\nimport {Injectable} from \"@tsed/di\";\nimport {pascalCase} from \"change-case\";\n\nfunction getDatabase(ctx: InitCmdContext) {\n  return ctx.features.find((type) => type.includes(\"typeorm:\"))?.split(\":\")[1] || \"\";\n}\n\n@Injectable()\nexport class TypeORMInitHook {\n  @Inject()\n  protected cliService: CliService;\n\n  @Inject()\n  protected packageJson: ProjectPackageJson;\n\n  @Inject()\n  protected rootRenderer: RootRendererService;\n\n  @Inject()\n  protected srcRenderer: SrcRendererService;\n\n  @Inject()\n  protected cliDockerComposeYaml: CliDockerComposeYaml;\n\n  @OnExec(\"init\")\n  onExec(ctx: InitCmdContext) {\n    this.addScripts();\n    this.addDependencies(ctx);\n    this.addDevDependencies(ctx);\n\n    const database = getDatabase(ctx);\n\n    if (!database) {\n      return [];\n    }\n\n    return this.cliService.getTasks(\"generate\", {\n      ...ctx,\n      type: \"typeorm:dataSource\",\n      name: pascalCase(database),\n      typeormDataSource: ctx.features.find((value) => value.startsWith(\"typeorm:\"))\n    });\n  }\n\n  addScripts() {\n    this.packageJson.addScripts({\n      typeorm: \"typeorm-ts-node-commonjs\"\n    });\n  }\n\n  addDependencies(ctx: InitCmdContext) {\n    this.packageJson.addDependencies({}, ctx);\n  }\n\n  addDevDependencies(ctx: InitCmdContext) {\n    this.packageJson.addDevDependencies({}, ctx);\n  }\n}\n"]}