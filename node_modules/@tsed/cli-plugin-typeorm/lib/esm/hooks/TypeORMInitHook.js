import { __decorate, __metadata } from "tslib";
import { CliDockerComposeYaml, CliService, Inject, OnExec, ProjectPackageJson, RootRendererService, SrcRendererService } from "@tsed/cli-core";
import { Injectable } from "@tsed/di";
import { pascalCase } from "change-case";
function getDatabase(ctx) {
    return ctx.features.find((type) => type.includes("typeorm:"))?.split(":")[1] || "";
}
let TypeORMInitHook = class TypeORMInitHook {
    cliService;
    packageJson;
    rootRenderer;
    srcRenderer;
    cliDockerComposeYaml;
    onExec(ctx) {
        this.addScripts();
        this.addDependencies(ctx);
        this.addDevDependencies(ctx);
        const database = getDatabase(ctx);
        if (!database) {
            return [];
        }
        return this.cliService.getTasks("generate", {
            ...ctx,
            type: "typeorm:dataSource",
            name: pascalCase(database),
            typeormDataSource: ctx.features.find((value) => value.startsWith("typeorm:"))
        });
    }
    addScripts() {
        this.packageJson.addScripts({
            typeorm: "typeorm-ts-node-commonjs"
        });
    }
    addDependencies(ctx) {
        this.packageJson.addDependencies({}, ctx);
    }
    addDevDependencies(ctx) {
        this.packageJson.addDevDependencies({}, ctx);
    }
};
__decorate([
    Inject(),
    __metadata("design:type", CliService)
], TypeORMInitHook.prototype, "cliService", void 0);
__decorate([
    Inject(),
    __metadata("design:type", ProjectPackageJson)
], TypeORMInitHook.prototype, "packageJson", void 0);
__decorate([
    Inject(),
    __metadata("design:type", RootRendererService)
], TypeORMInitHook.prototype, "rootRenderer", void 0);
__decorate([
    Inject(),
    __metadata("design:type", SrcRendererService)
], TypeORMInitHook.prototype, "srcRenderer", void 0);
__decorate([
    Inject(),
    __metadata("design:type", CliDockerComposeYaml)
], TypeORMInitHook.prototype, "cliDockerComposeYaml", void 0);
__decorate([
    OnExec("init"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], TypeORMInitHook.prototype, "onExec", null);
TypeORMInitHook = __decorate([
    Injectable()
], TypeORMInitHook);
export { TypeORMInitHook };
//# sourceMappingURL=TypeORMInitHook.js.map