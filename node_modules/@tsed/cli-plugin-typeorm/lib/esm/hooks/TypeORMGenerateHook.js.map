{"version":3,"file":"TypeORMGenerateHook.js","sourceRoot":"","sources":["../../../src/hooks/TypeORMGenerateHook.ts"],"names":[],"mappings":"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","sourcesContent":["import {FeaturesMap, GenerateCmdContext, ProvidersInfoService} from \"@tsed/cli\";\nimport {CliDockerComposeYaml, Inject, OnExec, OnPrompt, ProjectPackageJson, SrcRendererService, Tasks} from \"@tsed/cli-core\";\nimport {Injectable} from \"@tsed/di\";\nimport {constantCase} from \"change-case\";\nimport {TEMPLATE_DIR} from \"../utils/templateDir\";\n\nexport interface TypeORMGenerateOptions extends GenerateCmdContext {\n  typeormDataSource: string;\n  datasourceName: string;\n}\n\n@Injectable()\nexport class TypeORMGenerateHook {\n  @Inject()\n  protected projectPackageJson: ProjectPackageJson;\n\n  @Inject()\n  protected srcRenderService: SrcRendererService;\n\n  @Inject()\n  protected cliDockerComposeYaml: CliDockerComposeYaml;\n\n  constructor(private providersInfoService: ProvidersInfoService) {\n    providersInfoService.add(\n      {\n        name: \"TypeORM Datasource\",\n        value: \"typeorm:datasource\",\n        model: \"{{symbolName}}.datasource\"\n      },\n      TypeORMGenerateHook\n    );\n  }\n\n  @OnPrompt(\"generate\")\n  async onGeneratePrompt() {\n    const list = this.getTypeORMTypes().map(([value, {name}]) => {\n      return {\n        name: name,\n        value: value\n      };\n    });\n\n    return [\n      {\n        type: \"autocomplete\",\n        name: \"typeormDataSource\",\n        message: \"Which database type?\",\n        when(state: any) {\n          return state.type === \"typeorm:datasource\";\n        },\n        source: async (state: any, keyword: string) => {\n          if (keyword) {\n            return list.filter((item) => item.name.toLowerCase().includes(keyword.toLowerCase()));\n          }\n\n          return list;\n        }\n      }\n    ];\n  }\n\n  @OnExec(\"generate\")\n  onGenerateExec(ctx: TypeORMGenerateOptions): Tasks {\n    if (this.providersInfoService.isMyProvider(ctx.type, TypeORMGenerateHook)) {\n      return this.generateDataSourceTasks(ctx);\n    }\n\n    return [];\n  }\n\n  getTypeORMTypes() {\n    return Object.entries(FeaturesMap).filter(([value]) => value.startsWith(\"typeorm:\"));\n  }\n\n  generateDataSourceTasks(ctx: TypeORMGenerateOptions) {\n    const {typeormDataSource, symbolPath, name} = ctx;\n\n    if (!typeormDataSource) {\n      return [];\n    }\n\n    this.getTypeORMTypes()\n      .filter(([value]) => value === typeormDataSource)\n      .forEach(([, feature]) => {\n        if (feature.dependencies) {\n          this.projectPackageJson.addDependencies(feature.dependencies);\n        }\n        if (feature.devDependencies) {\n          this.projectPackageJson.addDependencies(feature.devDependencies);\n        }\n      });\n\n    const database = typeormDataSource.split(\":\").at(-1)!;\n\n    const symbolName = ctx.symbolName.replace(\"Datasource\", \"DataSource\");\n\n    return [\n      {\n        title: `Generate TypeORM datasource file to '${symbolPath}.ts'`,\n        task: () =>\n          this.srcRenderService.render(\n            \"datasource.hbs\",\n            {\n              name,\n              database,\n              symbolName,\n              tokenName: constantCase(symbolName)\n            },\n            {\n              templateDir: TEMPLATE_DIR,\n              output: `${ctx.symbolPath}.ts`,\n              rootDir: this.srcRenderService.rootDir\n            }\n          )\n      },\n      {\n        title: \"Generate docker-compose configuration\",\n        task: () => this.cliDockerComposeYaml.addDatabaseService(name, database)\n      }\n    ];\n  }\n}\n"]}